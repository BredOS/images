name: Build Images

on:
  workflow_dispatch:

jobs:
  build-riscv64:
    runs-on: ubuntu-latest
    container:
      image: bredos/bredos:latest
      ports:
        - 80
      options: --privileged --cap-add=MKNOD --device=/dev/loop-control:/dev/loop-control --device=/dev/loop0:/dev/loop0 --cap-add SYS_ADMIN

    strategy:
      fail-fast: false
      matrix:
        image: [opi-rv2, milkv-jupiter-image]

    steps:
      - name: Checkout Images
        uses: actions/checkout@v4
        with:
          path: images

      - name: Checkout mkimage
        uses: actions/checkout@v4
        with:
          repository: BredOS/mkimage
          path: mkimage

      - name: Install dependencies
        run: |
          init-docker
          sudo pacman -Sy --noconfirm --needed \
          python python-prettytable parted btrfs-progs dosfstools \
          git wget arch-install-scripts unzip gptfdisk xz jq which multipath-tools docker openssh

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build Image
        run: |
          sudo umount -R ./work/riscv64/* || true
          sudo rm -rf /var/lib/pacman/db.lck ./out ./work
          for i in {1..3}; do
            sudo python mkimage/mkimage.py -c images/${{ matrix.image }} -w ./work -o ./out --ci && break
          done

      - name: Send image to release job
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          /usr/bin/scp -i /tmp/deploy_key -o StrictHostKeyChecking=no out/*.img.xz "$RELEASE_VM:/images/"
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          RELEASE_VM: ${{ secrets.RELEASE_VM }}
        
      - name: Cleanup
        if: always()
        run: |
          sudo umount -R ./work/riscv64/* || true
          sudo rm -rf ./work ./out

  build-arm:
    runs-on: ubuntu-24.04-arm
    container:
      image: bredos/bredos:latest
      ports:
        - 80
      options:  --privileged --cap-add=MKNOD --device=/dev/loop-control:/dev/loop-control --device=/dev/loop0:/dev/loop0 --cap-add SYS_ADMIN

    strategy:
      fail-fast: false
      matrix:
        image: [nova-image, nx5-image, opi5-image, opi5plus-image, r58s-image, r58x-4g-image, r58x-image, r58x-pro-image, rock4c-plus-image, rock5a-image, rock5b-image, rock5bp-image, rock5c-image, rock5d-image, rock5t-image, rock5itx-image, cpi4-image, edge2-cinnamon-image, fydetabduo-image, vim4-gnome-image, dtv-cm5-image, radxa-cm5-image, opi5-max-image, opi5-pro-image, opi5-ultra-image, opi-cm5-image, itx-3588j-image, opi-zero3-image, opi-zero2w-image,
                nova-image-mainline, opi5-image-mainline, opi5plus-image-mainline, opi5-max-image, opi5-ultra-image, rock5a-image-mainline, rock5b-image-mainline, rock5bp-image-mainline, rock5itx-image-mainline]

    steps:
      - name: Checkout Images
        uses: actions/checkout@v4
        with:
          path: images

      - name: Checkout mkimage
        uses: actions/checkout@v4
        with:
          repository: BredOS/mkimage
          path: mkimage

      - name: Install dependencies
        run: |
          init-docker
          sudo pacman -Sy --noconfirm --needed \
          python python-prettytable parted btrfs-progs dosfstools \
          git wget arch-install-scripts unzip gptfdisk xz jq edk2-rk3588-devel which multipath-tools openssh

      - name: Change repo mainline
        run: |
          if [[ "${{ matrix.image }}" == *"mainline"* ]]; then
            cd images
            git checkout mainline
          fi

      - name: Build Image
        run: |
          sudo umount -R ./work/aarch64/* || true
          sudo rm -rf /var/lib/pacman/db.lck ./out ./work
          for i in {1..3}; do
              if [[ "${{ matrix.image }}" == *"mainline"* ]]; then
                img="${{ matrix.image }}"
                img="${img//-mainline/}"
              else
                img=${{ matrix.image }}
              fi
            sudo python mkimage/mkimage.py -c images/${img} -w ./work -o ./out --ci && break
          done

      - name: Send image to release job
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          /usr/bin/scp -i /tmp/deploy_key -o StrictHostKeyChecking=no out/*.img.xz "$RELEASE_VM:/images/"
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          RELEASE_VM: ${{ secrets.RELEASE_VM }}

      - name: Cleanup
        if: always()
        run: |
          sudo umount -R ./work/aarch64/* || true
          sudo rm -rf ./work ./out

  release:
    if: always()
    needs: [build-arm, build-riscv64]
    runs-on: [self-hosted, ARM64, BredOS, emag]

    steps:
      - name: Set current date as tag name
        id: set_tag_name
        run: echo "TAG_NAME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Create Release and Upload Each Image Individually
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          # Create a draft release
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"$TAG_NAME\", \"name\": \"$TAG_NAME\", \"draft\": true, \"prerelease\": true}" \
            "https://api.github.com/repos/$REPO/releases")

          RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r '.id')

          if [ "$RELEASE_ID" == "null" ]; then
            echo "Failed to create a release. Response: $RELEASE_RESPONSE"
            exit 1
          fi

          # Upload each image file to the release
          for img in /images/*.img.xz; do
            FILENAME=$(basename "$img")
            echo "Uploading $FILENAME to release $RELEASE_ID"
            curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              -T "$img" \
              "https://uploads.github.com/repos/$REPO/releases/$RELEASE_ID/assets?name=$FILENAME"
          done

      - name: Clean up
        if: always()
        run: |
          rm -rf ./out/ /images/*.img.xz
