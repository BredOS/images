#! /usr/bin/env python
from time import strftime

img_version = strftime("%Y%m%d")
edition = "Cinnamon"
arch = "aarch64"  # aarch64, armv7h, riscv64
img_name = "edge2-bredos-arm-cinnamon-v" + img_version
install_dir = "arch"
fs = "btrfs"  # ext4 or btrfs
img_type = "image"  # image (img.xz) 
img_backend = "loop"  # loop or qemu-nbd

# If you use btrfs you need add `rootflags=subvol=@ rootfstype=btrfs`
# And remove `rootfstype=ext4`

cmdline = "${bootargs} console=ttyFIQ0 console=tty0 irqchip.gicv3_pseudo_nmi=0 lcd_panel=${lcd_panel} fan=${fan_mode} consoleblank=0 loglevel=3 panic=10 rootwait rw init=/sbin/init rootfstype=btrfs rootflags=subvol=@ cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1 irqchip.gicv3_pseudo_nmi=0 switolb=1 coherent_pool=2M"

configtxt = """label BredOS ARM
    kernel /vmlinuz-linux-rockchip
    initrd /initramfs-linux-rockchip.img
    devicetreedir /dtbs/
    fdt /dtbs/rockchip/rk3588s-khadas-edge2.dtb

"""

partition_table = lambda img_size, fs: {
    "boot": ["0%", "150M", "150M", "fat32"],
    "primary": ["150M", "100%", str(int(img_size / 1000) - 150) + "M", fs],
}

partition_suffix = lambda config_dir, disk: [
    ["mkfs.fat", "-v", "-F32", "-n", "BOOT", disk + "p1"],
]

perms = {
    "/etc/": ["0", "0", "755"],
    "/usr/bin/resizefs": ["0", "0", "755"],
    "/usr/bin/zswap-arm-ctrl": ["0", "0", "755"],
    "/usr/bin/pacman-init": ["0", "0", "755"],
    "/usr/bin/oemcleanup": ["0", "0", "755"],
    "/etc/polkit-1/rules.d": ["0", "0", "750"],
    "/etc/sudoers.d": ["0", "0", "750"],
    "/usr/lib": ["0", "0", "755"],
    "/usr/bin": ["0", "0", "755"],
    "/usr": ["0", "0", "755"],
    "/home/bred/.config/autostart/org.bredos.bakery.desktop": ["1001", "1001", "755"],
    "/home/bred/Desktop/org.bredos.bakery.desktop": ["1001", "1001", "755"],
    "/home/bred/": ["1001", "1001", "750"],
    "/home": ["0", "0", "755"],
}

mkcmds = """
copyfiles(config_dir + "/alarmimg", cfg["install_dir"])
fixperms(cfg["install_dir"])
pacstrap_packages(pacman_conf, cfg["packages_file"], cfg["install_dir"])
machine_id()
fixperms(cfg["install_dir"])
copy_skel_to_users()
logging.info("Partitioning edge2")
rootfs_size = int(
    subprocess.check_output(["du", "-s", "--exclude=proc", cfg["install_dir"]])
    .split()[0]
    .decode("utf-8")
)
img_size, ldev = makeimg(
    rootfs_size, cfg["fs"], cfg["img_name"], cfg["img_backend"]
)
partition(
    ldev,
    cfg["fs"],
    img_size,
    cfg["partition_table"](img_size, cfg["fs"]),
)
if not os.path.exists(mnt_dir + "/boot"):
    os.mkdir(mnt_dir + "/boot")
subprocess.run("mount " + ldev + "p1 " + mnt_dir + "/boot", shell=True)
copyfiles(cfg["install_dir"], mnt_dir, retainperms=True)
create_extlinux_conf(mnt_dir, cfg["configtxt"], cfg["cmdline"], ldev)
create_fstab(cfg["fs"], ldev, simple_vfat=True)
unmount(cfg["img_backend"], mnt_dir, ldev)
cleanup(cfg["img_backend"])
if args.no_compress:
    logging.info(
        "The image will not have metadata for oowow applied since it's not compressed!"
    )
    copyimage(cfg["img_name"])
else:
    compressimage(cfg["img_name"])
    subprocess.check_output(["chmod", "+x", config_dir + "/xze"])
    subprocess.check_output(
        [
            config_dir + "/xze",
            cfg["out_dir"] + "/" + cfg["img_name"] + ".img.xz",
            "--meta",
            "label=BredOS",
            "builder=BredOS",
            "date=" + time.ctime().replace("  ", " "),
            "match=BOARD=Edge2",
            "link=https://bredos.org/",
            "duration=250",
            "desc=Edge2 BredOS "
            + cfg["edition"]
            + " edition v"
            + cfg["img_version"],
        ]
    )
cleanup(cfg["work_dir"])
"""
