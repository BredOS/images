#! /usr/bin/env python
from time import strftime

img_version = strftime("%Y-%m-%d")
edition = "gnome"
arch = "riscv64"  # aarch64, armv7h, riscv64
img_name = "BredOS-riscv64-Muse-Pi-Pro-" + img_version
install_dir = "arch"
fs = "btrfs"  # ext4 or btrfs
img_type = "image"  # image (img.xz) or rootfs (tar.gz)
img_backend = "loop"  # loop or qemu-nbd
cmdline = ""
recreate_part_table = False
uboot_parts = 4

# If you use btrfs you need add `rootflags=subvol=@ rootfstype=btrfs`
# And remove `rootfstype=ext4`


configtxt = """
## /etc/default/u-boot - configuration file

U_BOOT_IS_SETUP='true'

#U_BOOT_ALTERNATIVES="default recovery"
#U_BOOT_DEFAULT="l0"
#U_BOOT_PROMPT="1"
#U_BOOT_ENTRIES="all"
#U_BOOT_MENU_LABEL="BredOS"
U_BOOT_PARAMETERS="console=ttyS0,115200 console=tty1 rootwait rw init=/sbin/init rootflags=subvol=@ rootfstype=btrfs"
#U_BOOT_ROOT=""
#U_BOOT_TIMEOUT="50"

# Device tree file (will be searched and copied to /boot if U_BOOT_COPY_DTB_TO_BOOT=true)
U_BOOT_FDT="k1-x_MUSE-Pi.dtb"

# Device tree overlays
#U_BOOT_FDT_OVERLAYS=""

#U_BOOT_SYNC_DTBS="true"
U_BOOT_COPY_DTB_TO_BOOT="true"
"""

partition_prefix = lambda config_dir, disk: [
    ["parted", "--script", disk, "--align", "optimal",
     "mklabel", "gpt",
     "mkpart", "fsbl", "128KiB", "384KiB",
     "mkpart", "env", "384KiB", "448KiB",
     "mkpart", "opensbi", "1MiB", "2MiB",
     "mkpart", "uboot", "2MiB", "4MiB"
    ],
    ["dd", "if="+ config_dir + "bootinfo_sd.bin", "of="+ disk, "bs=1", "seek=0", "conv=notrunc"],
    ["dd", "if="+ config_dir + "FSBL.bin","of="+ disk + "p1", "conv=notrunc"],
    ["dd", "if="+ config_dir + "env.bin", "of="+ disk + "p2", "conv=notrunc"],
    ["dd", "if="+ config_dir + "fw_dynamic.itb", "of="+ disk + "p3", "conv=notrunc"],
    ["dd", "if="+ config_dir + "u-boot.itb", "of="+ disk + "p4", "conv=notrunc"]
]

partition_table = lambda img_size, fs: {
    "uboot": ["0%", "32M", "32M", "NONE"],
    "boot": ["32M", "544M", "512M", "fat32"],
    "primary": ["544", "100%", str(int(img_size / 1000) - 544) + "M", fs],
}

partition_suffix = lambda config_dir, disk: [
    ["mkfs.fat", "-v", "-F32", "-n", "BOOT", disk + "p5"],
]


perms = {
    "/etc/": ["0", "0", "755"],
    "/usr/bin/resizefs": ["0", "0", "755"],
    "/usr/bin/zswap-arm-ctrl": ["0", "0", "755"],
    "/usr/bin/oemcleanup": ["0", "0", "755"],
    "/etc/polkit-1/rules.d": ["0", "0", "750"],
    "/etc/sudoers.d": ["0", "0", "750"],
    "/usr/lib": ["0", "0", "755"],
    "/usr/bin": ["0", "0", "755"],
    "/usr": ["0", "0", "755"],
    "/home/bred/.config/autostart/org.bredos.bakery.desktop": ["1001", "1001", "755"],
    "/home/bred/Desktop/org.bredos.bakery.desktop": ["1001", "1001", "755"],
    "/home/bred/": ["1001", "1001", "750"],
    "/home": ["0", "0", "755"],
}

mkcmds = """
copyfiles(config_dir + "/alarmimg", cfg["install_dir"])
fixperms(cfg["install_dir"])
pacstrap_packages(pacman_conf, cfg["packages_file"], cfg["install_dir"])
machine_id()
fixperms(cfg["install_dir"])
copy_skel_to_users()
logging.info("Partitioning musepi")
rootfs_size = int(
    subprocess.check_output(["du", "-s", "--exclude=proc", cfg["install_dir"]])
    .split()[0]
    .decode("utf-8")
)
img_size, ldev = makeimg(
    rootfs_size, cfg["fs"], cfg["img_name"], cfg["img_backend"]
)
partition(
    ldev, cfg["fs"], img_size, cfg["partition_table"](img_size, cfg["fs"])
)
if not os.path.exists(mnt_dir):
    os.mkdir(mnt_dir)
subprocess.run("mount " + ldev + "p5 " + mnt_dir + "/boot", shell=True)
copyfiles(cfg["install_dir"], mnt_dir, retainperms=True)
create_fstab(cfg["fs"], ldev)
u_boot_update(mnt_dir, cfg["configtxt"])
unmount(cfg["img_backend"], mnt_dir, ldev)
cleanup(cfg["img_backend"])
if args.no_compress:
    copyimage(cfg["img_name"])
else:
    compressimage(cfg["img_name"])
cleanup(cfg["work_dir"])
"""
